 This code is licensed from CircleCI to the user under the MIT license.
# See here for details: https://circleci.com/developer/orbs/licensing
commands:
    create-or-update-resource:
        description: |
            Create or update a kubernetes resource.
            Requirements: kubeconfig should be configured to connect to the cluster.
        parameters:
            action-type:
                default: apply
                description: |
                    Specify whether to use `kubectl create` or `kubectl apply`
                    to create/update the resource.
                enum:
                    - create
                    - apply
                type: enum
            dry-run:
                default: false
                description: |
                    Whether the kubectl command will be executed in dry-run mode.
                type: boolean
            get-rollout-status:
                default: false
                description: |
                    Get the status of the rollout.
                    This can only be used for resource types that are valid
                    for usage with `kubectl rollout` subcommands.
                type: boolean
            kustomize:
                default: false
                description: |
                    Enable it to run the kubectl command with the option -k for kustomize.
                type: boolean
            namespace:
                default: ""
                description: |
                    The kubernetes namespace that should be used.
                type: string
            pinned-revision-to-watch:
                default: ""
                description: |
                    Pin a specific revision to be watched and abort watching if it is rolled
                    over by another revision.
                    Only effective if get-rollout-status is set to true.
                type: string
            resource-file-path:
                description: |
                    Path to file used to create/update the resource.
                type: string
            resource-name:
                default: ""
                description: |
                    Resource name in the format TYPE/NAME e.g. deployment/nginx-deployment
                    This is required if get-rollout-status is set to true.
                type: string
            show-kubectl-command:
                default: false
                description: |
                    Whether to show the kubectl command used.
                type: boolean
            watch-rollout-status:
                default: true
                description: |
                    Whether to watch the status of the latest rollout until it's done.
                    Only effective if get-rollout-status is set to true.
                type: boolean
            watch-timeout:
                default: ""
                description: |
                    The length of time to wait before ending the watch, zero means never.
                    Any other values should contain a corresponding time unit (e.g. 1s, 2m, 3h).
                    Only effective if get-rollout-status is set to true.
                type: string
        steps:
            - run:
                command: |
                    RESOURCE_FILE_PATH="<< parameters.resource-file-path >>"
                    ACTION_TYPE="<< parameters.action-type >>"
                    NAMESPACE="<< parameters.namespace >>"
                    DRY_RUN="<< parameters.dry-run >>"
                    KUSTOMIZE="<< parameters.kustomize >>"
                    if [ -n "${ACTION_TYPE}" ]; then
                      set -- "$@" "${ACTION_TYPE}"
                    fi
                    if [ -n "${RESOURCE_FILE_PATH}" ]; then
                      if [ "${KUSTOMIZE}" == "true" ]; then
                        set -- "$@" -k
                      else
                        set -- "$@" -f
                      fi
                      set -- "$@" "${RESOURCE_FILE_PATH}"
                    fi
                    if [ -n "${NAMESPACE}" ]; then
                        set -- "$@" --namespace="${NAMESPACE}"
                    fi
                    if [ "${DRY_RUN}" == "true" ]; then
                      set -- "$@" --dry-run
                    fi
                    <<# parameters.show-kubectl-command >>set -x<</ parameters.show-kubectl-command >>
                    kubectl "$@"
                    <<# parameters.show-kubectl-command >>set +x<</ parameters.show-kubectl-command >>
                name: Create/update the k8s resource
            - when:
                condition: << parameters.get-rollout-status >>
                steps:
                    - get-rollout-status:
                        namespace: << parameters.namespace >>
                        pinned-revision-to-watch: << parameters.pinned-revision-to-watch >>
                        resource-name: << parameters.resource-name >>
                        watch-rollout-status: << parameters.watch-rollout-status >>
                        watch-timeout: << parameters.watch-timeout >>
    delete-resource:
        description: |
            Delete kubernetes resource(s).
            Requirements: kubeconfig should be configured to connect to the cluster.
        parameters:
            all:
                default: false
                description: |
                    If true, deletes all resources including uninitialized ones, in the
                    namespace of the specified resource types.
                type: boolean
            cascade:
                default: true
                description: |
                    If true, cascades the deletion of the resources managed by this resource.
                    (e.g. Pods created by a ReplicationController)
                type: boolean
            dry-run:
                default: false
                description: |
                    Whether the kubectl command will be executed in dry-run mode.
                type: boolean
            force:
                default: false
                description: |
                    Only used when "0" is specified for grace-period. If true, immediately remove
                    resources from API and bypass graceful deletion. Note that immediate deletion of
                    some resources may result in inconsistency or data loss and requires
                    confirmation.
                type: boolean
            grace-period:
                default: -1
                description: |
                    Period of time in seconds given to the resource to terminate gracefully.
                    A value of "-1" will be ignored.
                type: integer
            ignore-not-found:
                default: false
                description: |
                    If true, treats "resource not found" as a successful delete.
                    (Note: unlike the kubectl command, this does not default to true
                    when the "all" parameter value is set to true)
                type: boolean
            kustomize:
                default: false
                description: |
                    Enable it to run the kubectl command with the option -k for kustomize.
                type: boolean
            label-selector:
                default: ""
                description: |
                    Use a label selector on the resource(s) to be deleted.
                    Effective only when the resource-types parameter is specified.
                    Cannot be used together with the resource-names parameter.
                type: string
            namespace:
                default: ""
                description: |
                    The kubernetes namespace that should be used.
                type: string
            now:
                default: false
                description: |
                    If true, resources are signaled for immediate shutdown.
                type: boolean
            resource-file-path:
                default: ""
                description: |
                    Path to file used to describe the resource.
                    Should not be set when the "resource-types" parameter is specified.
                type: string
            resource-names:
                default: ""
                description: |
                    Specifies the names of resource(s) to be deleted.
                    Effective only when the resource-types parameter is specified.
                    Cannot be used together with the label-selector parameter.
                type: string
            resource-types:
                default: ""
                description: |
                    Specify what is to be deleted in the form of resource types.
                    This parameter is meant to be combined with either the
                    "resource-names" or the "label-selector" parameter.
                    e.g. use the value "pods,services" for "resource-types" and
                    the value "name=myLabel" for "label-selector" to delete pods and services
                    with the label name=myLabel.
                    e.g. use the value "pods,services" for "resource-types" and
                    the value "baz foo" for "resource-names" to delete pods and services
                    the match the names "baz" and "foo".

                    Should not be set when the "resource-file-path" parameter is specified.
                type: string
            show-kubectl-command:
                default: false
                description: |
                    Whether to show the kubectl command used.
                type: boolean
            wait:
                default: true
                description: |
                    If true, wait for resources to be gone before returning. This waits for finalizers.
                type: boolean
        steps:
            - run:
                command: |
                    RESOURCE_FILE_PATH="<< parameters.resource-file-path >>"
                    RESOURCE_TYPES="<< parameters.resource-types >>"
                    RESOURCE_NAMES="<< parameters.resource-names >>"
                    LABEL_SELECTOR="<< parameters.label-selector >>"
                    ALL="<< parameters.all >>"
                    CASCADE="<< parameters.cascade >>"
                    FORCE="<< parameters.force >>"
                    GRACE_PERIOD="<< parameters.grace-period >>"
                    IGNORE_NOT_FOUND="<< parameters.ignore-not-found >>"
                    NOW="<< parameters.now >>"
                    WAIT="<< parameters.wait >>"
                    NAMESPACE="<< parameters.namespace >>"
                    DRY_RUN="<< parameters.dry-run >>"
                    KUSTOMIZE="<< parameters.kustomize >>"
                    if [ -n "${RESOURCE_FILE_PATH}" ]; then
                      if [ "${KUSTOMIZE}" == "true" ]; then
                        set -- "$@" -k
                      else
                        set -- "$@" -f
                      fi
                      set -- "$@" "${RESOURCE_FILE_PATH}"
                    elif [ -n "${RESOURCE_TYPES}" ]; then
                      set -- "$@" "${RESOURCE_TYPES}"
                      if [ -n "${RESOURCE_NAMES}" ]; then
                        set -- "$@" ${RESOURCE_NAMES}
                      elif [ -n "${LABEL_SELECTOR}" ]; then
                        set -- "$@" -l
                        set -- "$@" "${LABEL_SELECTOR}"
                      fi
                    fi
                    if [ "${ALL}" == "true" ]; then
                      set -- "$@" --all=true
                    fi
                    if [ "${FORCE}" == "true" ]; then
                      set -- "$@" --force=true
                    fi
                    if [ "${GRACE_PERIOD}" != "-1" ]; then
                      set -- "$@" --grace-period="${GRACE_PERIOD}"
                    fi
                    if [ "${IGNORE_NOT_FOUND}" == "true" ]; then
                      set -- "$@" --ignore-not-found=true
                    fi
                    if [ "${NOW}" == "true" ]; then
                      set -- "$@" --now=true
                    fi
                    if [ -n "${NAMESPACE}" ]; then
                        set -- "$@" --namespace="${NAMESPACE}"
                    fi
                    if [ "${DRY_RUN}" == "true" ]; then
                      set -- "$@" --dry-run
                    fi
                    set -- "$@" --wait="${WAIT}"
                    set -- "$@" --cascade="${CASCADE}"
                    <<# parameters.show-kubectl-command >>set -x<</ parameters.show-kubectl-command >>
                    kubectl delete "$@"
                    <<# parameters.show-kubectl-command >>set +x<</ parameters.show-kubectl-command >>
                name: Delete the k8s resource(s)
    get-rollout-status:
        description: |
            Gets the rollout status of a resource.
            This command is only valid for resource types that are valid
            for usage with `kubectl rollout` subcommands.
            Requirements: kubeconfig should be configured to connect to the cluster.
        parameters:
            namespace:
                default: ""
                description: |
                    The kubernetes namespace that should be used.
                type: string
            pinned-revision-to-watch:
                default: ""
                description: |
                    Pin a specific revision to be watched and abort watching if it is rolled
                    over by another revision.
                type: string
            resource-name:
                description: |
                    Resource name in the format TYPE/NAME e.g. deployment/nginx-deployment
                type: string
            show-kubectl-command:
                default: false
                description: |
                    Whether to show the kubectl command used.
                type: boolean
            watch-rollout-status:
                default: true
                description: |
                    Whether to watch the status of the latest rollout until it's done.
                type: boolean
            watch-timeout:
                default: ""
                description: |
                    The length of time to wait before ending the watch, zero means never.
                    Any other values should contain a corresponding time unit (e.g. 1s, 2m, 3h).
                type: string
        steps:
            - run:
                command: |
                    RESOURCE_NAME="<< parameters.resource-name >>"
                    NAMESPACE="<< parameters.namespace >>"
                    WATCH_ROLLOUT_STATUS="<< parameters.watch-rollout-status >>"
                    PINNED_REVISION_TO_WATCH="<< parameters.pinned-revision-to-watch >>"
                    WATCH_TIMEOUT="<< parameters.watch-timeout >>"
                    if [ -n "${RESOURCE_NAME}" ]; then
                      set -- "$@" "${RESOURCE_NAME}"
                    fi
                    if [ -n "${NAMESPACE}" ]; then
                      set -- "$@" "--namespace=${NAMESPACE}"
                    fi
                    if [ "${WATCH_ROLLOUT_STATUS}" == "true" ]; then
                      set -- "$@" --watch=true
                      if [ -n "${PINNED_REVISION_TO_WATCH}" ]; then
                        set -- "$@" "--revision=${PINNED_REVISION_TO_WATCH}"
                      fi
                      if [ -n "${WATCH_TIMEOUT}" ]; then
                        set -- "$@" "--timeout=${WATCH_TIMEOUT}"
                      fi
                    fi
                    <<# parameters.show-kubectl-command >>set -x<</ parameters.show-kubectl-command >>
                    kubectl rollout status "$@"
                    <<# parameters.show-kubectl-command >>set +x<</ parameters.show-kubectl-command >>
                name: Show the resource rollout status
            - run:
                command: |
                    NAMESPACE="<< parameters.namespace >>"
                    if [ -n "${NAMESPACE}" ]; then
                      set -- "$@" "--namespace=${NAMESPACE}"
                    fi
                    <<# parameters.show-kubectl-command >>set -x<</ parameters.show-kubectl-command >>
                    kubectl describe << parameters.resource-name >> "$@"
                    <<# parameters.show-kubectl-command >>set +x<</ parameters.show-kubectl-command >>
                name: Get a description of the resource
    install:
        description: |
            Installs kubectl and kops (latest releases, by default)
            Requirements: curl, amd64 architecture
        parameters:
            kops-version:
                default: latest
                type: string
            kubectl-version:
                default: latest
                type: string
        steps:
            - install-kops:
                kops-version: << parameters.kops-version >>
            - install-kubectl:
                kubectl-version: << parameters.kubectl-version >>
    install-kops:
        description: |
            Installs kops (latest release, by default)
            Requirements: curl, amd64 architecture
        parameters:
            kops-version:
                default: latest
                type: string
        steps:
            - run:
                command: |
                    if [[ <<parameters.kops-version>> == "latest" ]]; then
                      # get latest kops release
                      KOPS_VERSION=$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)
                    else
                      KOPS_VERSION=<<parameters.kops-version>>
                    fi

                    PLATFORM="linux"
                    if [ -n "$(uname | grep "Darwin")" ]; then
                      PLATFORM="darwin"
                    fi

                    # download kops
                    curl -LO https://github.com/kubernetes/kops/releases/download/$KOPS_VERSION/kops-$PLATFORM-amd64

                    [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

                    $SUDO chmod +x kops-$PLATFORM-amd64

                    $SUDO mv kops-$PLATFORM-amd64 /usr/local/bin/kops
                name: Install kops
    install-kubeconfig:
        description: |
            Install kubeconfig file with the contents taken from the value of an
            environment variable, which should be base64-encoded.
        parameters:
            kubeconfig:
                default: KUBECONFIG_DATA
                description: Environment variable name containing base64-encoded kubeconfig data
                type: env_var_name
        steps:
            - run:
                command: |
                    if [ -n "${<<parameters.kubeconfig>>}" ]; then
                      mkdir -p $HOME/.kube
                      echo -n "${<<parameters.kubeconfig>>}" | base64 --decode > $HOME/.kube/config
                    fi
                name: Install kubeconfig
    install-kubectl:
        description: |
            Installs kubectl (latest release, by default)
            Requirements: curl, amd64 architecture
        parameters:
            kubectl-version:
                default: latest
                type: string
        steps:
            - run:
                command: |
                    if [[ <<parameters.kubectl-version>> == "latest" ]]; then
                      # get latest kubectl release
                      KUBECTL_VERSION=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
                    else
                      KUBECTL_VERSION=<<parameters.kubectl-version>>
                    fi

                    PLATFORM="linux"
                    if [ -n "$(uname | grep "Darwin")" ]; then
                      PLATFORM="darwin"
                    fi

                    # download kubectl
                    curl -LO https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/$PLATFORM/amd64/kubectl

                    [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

                    $SUDO chmod +x ./kubectl

                    $SUDO mv ./kubectl /usr/local/bin
                name: Install kubectl
    rollback:
        description: |
            Rollback a deployment or daemonset resource.
            Requirements: kubeconfig should be configured to connect to the cluster.
        parameters:
            get-rollout-status:
                default: false
                description: |
                    Get the status of the rollout.
                    This can only be used for resource types that are valid
                    for usage with `kubectl rollout` subcommands.
                type: boolean
            namespace:
                default: ""
                description: |
                    The kubernetes namespace that should be used.
                type: string
            resource-name:
                description: |
                    Resource name in the format TYPE/NAME e.g. deployment/nginx-deployment
                type: string
            show-kubectl-command:
                default: false
                description: |
                    Whether to show the kubectl command used.
                type: boolean
            watch-rollout-status:
                default: true
                description: |
                    Whether to watch the status of the latest rollout until it's done.
                type: boolean
            watch-timeout:
                default: ""
                description: |
                    The length of time to wait before ending the watch, zero means never.
                    Any other values should contain a corresponding time unit (e.g. 1s, 2m, 3h).
                type: string
        steps:
            - run:
                command: |
                    RESOURCE_NAME="<< parameters.resource-name >>"
                    NAMESPACE="<< parameters.namespace >>"
                    if [ -n "${RESOURCE_NAME}" ]; then
                      set -- "$@" "${RESOURCE_NAME}"
                    fi
                    if [ -n "${NAMESPACE}" ]; then
                      set -- "$@" "--namespace=${NAMESPACE}"
                    fi
                    <<# parameters.show-kubectl-command >>set -x<</ parameters.show-kubectl-command >>
                    kubectl rollout undo "$@"
                    <<# parameters.show-kubectl-command >>set +x<</ parameters.show-kubectl-command >>
                name: Rollback the resource
            - when:
                condition: << parameters.get-rollout-status >>
                steps:
                    - get-rollout-status:
                        namespace: << parameters.namespace >>
                        resource-name: << parameters.resource-name >>
                        watch-rollout-status: << parameters.watch-rollout-status >>
                        watch-timeout: << parameters.watch-timeout >>
    update-container-image:
        description: |
            Updates existing container image(s) of resources on the cluster using the
            `kubectl set image` command.
            Requirements: kubeconfig should be configured to connect to the cluster.
        parameters:
            container-image-updates:
                description: |
                    Specify a list of container image updates
                    (space-delimited name value pairs in the form
                    CONTAINER_NAME_1=CONTAINER_IMAGE_1 ... CONTAINER_NAME_N=CONTAINER_IMAGE_N)
                    to be applied to the resource via `kubectl set image`.
                    e.g. "busybox=busybox nginx=nginx:1.9.1"
                type: string
            dry-run:
                default: false
                description: |
                    Whether the kubectl command will be executed in dry-run mode.
                type: boolean
            get-rollout-status:
                default: false
                description: |
                    Get the status of the rollout.
                    This can only be used for resource types that are valid
                    for usage with `kubectl rollout` subcommands.
                type: boolean
            namespace:
                default: ""
                description: |
                    The kubernetes namespace that should be used.
                type: string
            pinned-revision-to-watch:
                default: ""
                description: |
                    Pin a specific revision to be watched and abort watching if it is rolled
                    over by another revision.
                    Only effective if get-rollout-status is set to true.
                type: string
            record:
                default: false
                description: |
                    Whether to record the update
                type: boolean
            resource-file-path:
                default: ""
                description: |
                    Path to file used to update the resource.
                    Either resource-file-path or resource-name need to be specified.
                type: string
            resource-name:
                default: ""
                description: |
                    Resource name in the format TYPE/NAME e.g. deployment/nginx-deployment
                    Either resource-file-path or resource-name need to be specified.
                    This is required if get-rollout-status is set to true.
                type: string
            show-kubectl-command:
                default: false
                description: |
                    Whether to show the kubectl command used.
                type: boolean
            watch-rollout-status:
                default: true
                description: |
                    Whether to watch the status of the latest rollout until it's done.
                    Only effective if get-rollout-status is set to true.
                type: boolean
            watch-timeout:
                default: ""
                description: |
                    The length of time to wait before ending the watch, zero means never.
                    Any other values should contain a corresponding time unit (e.g. 1s, 2m, 3h).
                    Only effective if get-rollout-status is set to true.
                type: string
        steps:
            - run:
                command: |
                    RESOURCE_FILE_PATH="<< parameters.resource-file-path >>"
                    RESOURCE_NAME="<< parameters.resource-name >>"
                    CONTAINER_IMAGE_UPDATES="<< parameters.container-image-updates >>"
                    NAMESPACE="<< parameters.namespace >>"
                    RECORD="<< parameters.record >>"
                    DRY_RUN="<< parameters.dry-run >>"
                    if [ -n "${RESOURCE_FILE_PATH}" ]; then
                      set -- "$@" -f
                      set -- "$@" "${RESOURCE_FILE_PATH}"
                    elif [ -n "${RESOURCE_NAME}" ]; then
                      set -- "$@" "${RESOURCE_NAME}"
                    else
                      echo "Error: The update-container-image command requires either resource-file-path or resource-name to be specified."
                      exit 1
                    fi
                    if [ -n "${CONTAINER_IMAGE_UPDATES}" ]; then
                      set -- "$@" ${CONTAINER_IMAGE_UPDATES}
                    fi
                    if [ -n "${NAMESPACE}" ]; then
                      set -- "$@" --namespace="${NAMESPACE}"
                    fi
                    set -- "$@" "--record=${RECORD}"
                    set -- "$@" "--dry-run=${DRY_RUN}"
                    <<# parameters.show-kubectl-command >>set -x<</ parameters.show-kubectl-command >>
                    kubectl set image "$@"
                    <<# parameters.show-kubectl-command >>set +x<</ parameters.show-kubectl-command >>
                name: Update the container image(s) for the resource
            - when:
                condition: << parameters.get-rollout-status >>
                steps:
                    - get-rollout-status:
                        namespace: << parameters.namespace >>
                        pinned-revision-to-watch: << parameters.pinned-revision-to-watch >>
                        resource-name: << parameters.resource-name >>
                        watch-rollout-status: << parameters.watch-rollout-status >>
                        watch-timeout: << parameters.watch-timeout >>
description: |
    A collection of tools for working with Kubernetes on CircleCI
    View this orb's source: https://github.com/CircleCI-Public/kubernetes-orb
display:
    home_url: https://github.com/CircleCI-Public/kubernetes-orb
examples:
    delete:
        description: |
            Delete kubernetes resource.
        usage:
            jobs:
                delete:
                    docker:
                        - image: cimg/base:stable
                    steps:
                        - kubernetes/install-kubectl
                        - kubernetes/delete-resource:
                            now: true
                            resource-names: nginx-deployment
                            resource-types: deployments
                            wait: true
            orbs:
                kubernetes: circleci/kubernetes@x.y.z
            version: 2.1
    deployment:
        description: |
            Deploying kubernetes resources.
        usage:
            jobs:
                create-update:
                    docker:
                        - image: cimg/base:stable
                    steps:
                        - checkout
                        - kubernetes/install-kubectl
                        - kubernetes/create-or-update-resource:
                            get-rollout-status: true
                            resource-file-path: tests/nginx-deployment/deployment.yaml
                            resource-name: deployment/nginx-deployment
                            show-kubectl-command: true
            orbs:
                kubernetes: circleci/kubernetes@x.y.z
            version: 2.1
    deployment-update:
        description: |
            Update kubernetes resource.
        usage:
            jobs:
                update:
                    docker:
                        - image: cimg/base:stable
                    steps:
                        - checkout
                        - kubernetes/install-kubectl
                        - kubernetes/update-container-image:
                            container-image-updates: nginx=nginx:1.9.1
                            get-rollout-status: true
                            record: true
                            resource-name: deployment/nginx-deployment
            orbs:
                kubernetes: circleci/kubernetes@x.y.z
            version: 2.1
    install:
        description: |
            Install kops and kubectl
        usage:
            jobs:
                build:
                    macos:
                        xcode: "9.0"
                    steps:
                        - checkout
                        - kubernetes/install
            orbs:
                kubernetes: circleci/kubernetes@x.y.z
            version: 2.1
    install-kops:
        description: |
            Install kops
        usage:
            jobs:
                build:
                    macos:
                        xcode: "9.0"
                    steps:
                        - checkout
                        - kubernetes/install-kops
            orbs:
                kubernetes: circleci/kubernetes@x.y.z
            version: 2.1
    install-kubeconfig:
        description: |
            Install kubeconfig
        usage:
            jobs:
                build:
                    macos:
                        xcode: "9.0"
                    steps:
                        - checkout
                        - kubernetes/install-kubeconfig:
                            kubeconfig: KUBECONFIG_DATA
            orbs:
                kubernetes: circleci/kubernetes@1.0.0
            version: 2.1
    install-kubectl:
        description: |
            Install kubectl
        usage:
            jobs:
                build:
                    macos:
                        xcode: "9.0"
                    steps:
                        - checkout
                        - kubernetes/install-kubectl
            orbs:
                kubernetes: circleci/kubernetes@x.y.z
            version: 2.1
version: 2.1
